name: CI/CD Pipeline

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Check out code
        uses: actions/checkout@v2

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '14'

      - name: Install dependencies
        run: |
          npm install

  docker:
    runs-on: ubuntu-latest
    needs: build # Esta etapa se ejecuta solo si "build" fue exitosa

    steps:
      - name: Check out code
        uses: actions/checkout@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: us-east-1

      - name: Login to Amazon ECR
        id: login-ecr
        run: |
          aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin 975050307414.dkr.ecr.us-east-1.amazonaws.com

      - name: Build, Tag and Push Docker Image
        env:
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t 975050307414.dkr.ecr.us-east-1.amazonaws.com/ci-cd:$IMAGE_TAG -f backend/Dockerfile backend
          docker push 975050307414.dkr.ecr.us-east-1.amazonaws.com/ci-cd:$IMAGE_TAG 

  deploy:
    runs-on: ubuntu-latest
    needs: docker 
    if: github.event_name == 'workflow_dispatch' 

    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: us-east-1

      - name: Connect to EC2 and Deploy
        env:
          KEY: ${{ secrets.EC2_PRIVATE_KEY }}
        run: |
          echo "$KEY" > ec2-key.pem
          chmod 600 ec2-key.pem

          ssh -i ec2-key.pem -o StrictHostKeyChecking=no ec2-user@98.81.200.188 << EOF
            docker pull 975050307414.dkr.ecr.us-east-1.amazonaws.com/ci-cd:$IMAGE_TAG
            docker stop myapp || true
            docker rm myapp || true
            docker run -d -p 80:5000 --name myapp 975050307414.dkr.ecr.us-east-1.amazonaws.com/ci-cd:$IMAGE_TAG
          EOF